{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, ACCOUNT_DELETED } from \"./types\"; //  Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/me\");\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(\"/api/profile\", formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete account\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm(\"Are you sure? this can NOT be undone!\")) {\n    try {\n      await axios.delete(\"/api/profile\");\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert(\"Your account has been permanently deleted\"));\n    } catch (error) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/chrono/Desktop/Web-Dev-Projects/social-hub/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","CLEAR_PROFILE","ACCOUNT_DELETED","getCurrentProfile","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","deleteAccount","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\n\nimport {\n  GET_PROFILE,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED\n} from \"./types\";\n\n\n\n//  Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n\n  try {\n    \n    const res = await axios.get(\"/api/profile/me\");\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n\n  } \n   catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    })\n  }\n} \n\n\n\n// Create or update profile\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    const res = await axios.post(\"/api/profile\", formData, config);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    })\n\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'))\n\n    if (!edit) {\n      history.push('/dashboard')\n    }\n  } \n  catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: error.response.statusText, status: error.response.status }\n    })\n  }\n}\n\n\n// Delete account\nexport const deleteAccount = () => async dispatch => {\n\n  if (window.confirm(\"Are you sure? this can NOT be undone!\")) {\n    try {\n      await axios.delete(\"/api/profile\");\n\n      dispatch({ type: CLEAR_PROFILE });\n      dispatch({ type: ACCOUNT_DELETED });\n\n      dispatch(setAlert(\"Your account has been permanently deleted\"))\n\n    } catch (error) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: error.response.statusText, status: error.response.status }\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}